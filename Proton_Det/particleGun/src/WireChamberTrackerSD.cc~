#include "WireChamberTrackerSD.hh"
#include "G4HCofThisEvent.hh"
#include "G4Step.hh"
#include "G4ThreeVector.hh"
#include "G4SDManager.hh"
#include "G4ios.hh"

#include "EventAction.hh"

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <iterator>
#include <algorithm>
#include <vector>
#include <iomanip>

using namespace std;

extern G4int currentEventID;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

WireChamberTrackerSD::WireChamberTrackerSD(G4String name)
:G4VSensitiveDetector(name)
{
  G4String HCname;
  collectionName.insert(HCname="WiretrackerCollection");
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

WireChamberTrackerSD::~WireChamberTrackerSD()
{
   ofstream OutputFile("WireDeposit.txt");
   OutputFile << "X Position" << "\t" << "YPosition" << "\t" << "Particle Type" << "\t"
		  << "Energy left" << "\t" << "Track ID" << "\t"
		  << "Parent Track ID " << "Chamber Number " << "Time of current hit "
                  << "Edep wire chamber 1 " << "Edep wire chamber 2" << G4endl;
   for (G4int i = 0; i < depPosX.size(); i++)
   {
	OutputFile << depPosX[i] << setprecision(3) << "\t\t" 
		       << depPosY[i] << setprecision(3) << "\t\t"
                       << depParticleType[i] << "\t\t" 
		       << energyLeft[i] << setprecision(3) << "\t\t" 
		       << currentTrackID[i] << "\t\t" << parentTrackID[i] << "\t\t"
		       << chamberNumber[i] <<  "\t\t" << timeOfCurrentHit[i]
   		       << "\t\t" << eventID[i] << "\t\t" << totalEnergyDeposited[i]
                       << "\t\t" << energyBeforeWC[i] << G4endl;
   }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void WireChamberTrackerSD::Initialize(G4HCofThisEvent* HCE)
{
  WiretrackerCollection = new WireChamberTrackerHitsCollection
                          (SensitiveDetectorName,collectionName[0]); 
  static G4int HCID = -1;
  if(HCID<0)
  { HCID = G4SDManager::GetSDMpointer()->GetCollectionID(collectionName[0]); }
  HCE->AddHitsCollection( HCID, WiretrackerCollection ); 
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4bool WireChamberTrackerSD::ProcessHits(G4Step* aStep,G4TouchableHistory*)
{
  // Get total energy deposited in this step
  G4double edep = aStep->GetTotalEnergyDeposit();

  if(edep==0.) return false;

  WireChamberTrackerHit* newHit = new WireChamberTrackerHit(event);
  G4int stepTrackID = aStep->GetTrack()->GetTrackID();
  G4int stepChamberNumber = aStep->GetPreStepPoint()->GetTouchableHandle()
                                               ->GetCopyNumber();

  G4double currentHitTime = aStep->GetTrack()->GetLocalTime();
  newHit->SetTrackID(stepTrackID);
  newHit->SetChamberNb(stepChamberNumber);

  G4String particleType = aStep->GetTrack()->GetParticleDefinition()->GetParticleName();
  newHit->SetEdep     (edep);
 
  G4ThreeVector pos = aStep->GetPostStepPoint()->GetPosition();
 
  newHit->SetPos      (pos);
  WiretrackerCollection->insert( newHit );
 
  particleType = aStep->GetTrack()->GetParticleDefinition()->GetParticleName();
  stepChamberNumber = aStep->GetPreStepPoint()->GetTouchableHandle()
                                               ->GetCopyNumber(); 
  G4double currentKineticEnergy = aStep->GetTrack()->GetKineticEnergy();

  // If the proton is just entering a chamber
  if (particleType == "proton" && aStep->GetPreStepPoint()->GetStepStatus() == fGeomBoundary)
  {
      // If it is entering the first chamber
      if (stepChamberNumber == 0)
      {
          energyBeforeFirstWireChamber = currentKineticEnergy;
          energyBeforeWC.push_back(energyBeforeFirstWireChamber);
      }
      else 
      {
          // If it is entering the second chamber  
          energyBeforeWC.push_back(0);
          if (stepChamberNumber == 1)
	     energyBeforeSecondWireChamber = currentKineticEnergy;
      }
  }
  else energyBeforeWC.push_back(0);

  // If the proton is just exiting a chamber
  if (particleType == "proton" && aStep->GetPostStepPoint()->GetStepStatus() == fGeomBoundary)
  {
      // If the proton is exiting the first chamber
      if (stepChamberNumber == 0)
      {
	  energyAfterFirstWireChamber = currentKineticEnergy;
          energyDepositedInFirstChamber.push_back(
		energyBeforeFirstWireChamber - energyAfterFirstWireChamber);
      }
      else
      {
         // Proton has not left first chamber
	 energyDepositedInFirstChamber.push_back(0);
         
         // If the proton is exiting the second chamber, should be true if the 
         // program gets to this stage
         if (stepChamberNumber == 1)
         {
             energyAfterSecondWireChamber = currentKineticEnergy;
     	     energyDepositedInSecondChamber.push_back(
		energyBeforeSecondWireChamber - energyAfterSecondWireChamber);
         }
         else //Proton has not left second chamber 
             energyDepositedInSecondChamber.push_back(0);	
      }
  }
  // Otherwise set to zero, much easier to output if all the vectors are the
  // same length
     else
     { 
        energyDepositedInFirstChamber.push_back(0);
        energyDepositedInSecondChamber.push_back(0); 
     }

     depPosX.push_back(pos.getX());
     depPosY.push_back(pos.getY());

     depParticleType.push_back(particleType);

     energyLeft.push_back(aStep->GetTrack()->GetKineticEnergy());

     currentTrackID.push_back(stepTrackID);
     parentTrackID.push_back(aStep->GetTrack()->GetParentID());

     chamberNumber.push_back(stepChamberNumber);
     timeOfCurrentHit.push_back(currentHitTime);

     eventID.push_back(currentEventID);

  newHit->Draw();
    
  return true;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void WireChamberTrackerSD::EndOfEvent(G4HCofThisEvent*)
{
}

