//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file analysis/shared/src/EventAction.cc
/// \brief Implementation of the EventAction class
//
//
// $Id$

#include "EventAction.hh"
#include "RunAction.hh"
#include "HistoManager.hh"

#include "G4Event.hh"
#include "G4EventManager.hh"

extern G4int currentEventID;

EventAction::EventAction(RunAction* run, HistoManager* histo)
:fRunAct(run),fHistoManager(histo)
{
 currentEventID = 0;
 fEnergyDepInSiliconDetector = 0;
 fPrintModulo = 100; 
}

EventAction::~EventAction()
{
  
}

void EventAction::BeginOfEventAction(const G4Event* evt)
{  
  currentEventID = evt->GetEventID();
  if (currentEventID%fPrintModulo == 0) 
    G4cout << "\n---> Begin of event: " << currentEventID << G4endl;

 // initialisation per event
  fEnergyDepInSiliconDetector = 0;
  fEnergyDepInWireChamber = 0;
}


void EventAction::EndOfEventAction(const G4Event*)
{
  //accumulates statistic//

  fRunAct->fillPerEvent(fEnergyDepInSiliconDetector);

  //fill histograms//

  if (fEnergyDepInSiliconDetector > 0)
  {
     fHistoManager->FillHisto(1, 10, fEnergyDepInSiliconDetector);

     fHistoManager->FillHisto(2, 10, fEnergyDepInWireChamber);

     //fill ntuple//

     fHistoManager->FillNtuple(fEnergyDepInSiliconDetector);
  }
  
}  

