#include "SiliconDetectorTrackerSD.hh"
#include "G4HCofThisEvent.hh"
#include "G4Step.hh"
#include "G4ThreeVector.hh"
#include "G4SDManager.hh"
#include "G4ios.hh"

#include "EventAction.hh"

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <iterator>
#include <algorithm>
#include <vector>

using namespace std;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

SiliconDetectorTrackerSD::SiliconDetectorTrackerSD(G4String name)
:G4VSensitiveDetector(name)
{
  G4String HCname;
  collectionName.insert(HCname="trackerCollection");
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

SiliconDetectorTrackerSD::~SiliconDetectorTrackerSD()
{
   ofstream PosXOutputFile("SiliconDeposit.txt");
   PosXOutputFile << "X Position" << "\t" << "YPosition" << "\t" << "Particle Type" << "\t"
		  << "Energy left" << "\t" << "Track ID" << "\t"
		  << "Parent Track ID" << G4endl;
   for (G4int i = 0; i < depPosX.size(); i++)
   {
	PosXOutputFile << depPosX[i] << setprecision(3) << "\t\t" 
		       << depPosY[i] << setprecision(3) << "\t\t"
                       << depParticleType[i] << "\t\t" 
		       << energyLeft[i] << setprecision(3) << "\t\t" 
		       << currentTrackID[i] << "\t\t" << parentTrackID[i] << G4endl;
   }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void SiliconDetectorTrackerSD::Initialize(G4HCofThisEvent* HCE)
{
  trackerCollection = new SiliconDetectorTrackerHitsCollection
                          (SensitiveDetectorName,collectionName[0]); 
  static G4int HCID = -1;
  if(HCID<0)
  { HCID = G4SDManager::GetSDMpointer()->GetCollectionID(collectionName[0]); }
  HCE->AddHitsCollection( HCID, trackerCollection ); 
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4bool SiliconDetectorTrackerSD::ProcessHits(G4Step* aStep,G4TouchableHistory*)
{
  G4double edep = aStep->GetTotalEnergyDeposit();

  if(edep==0.) return false;

  SiliconDetectorTrackerHit* newHit = new SiliconDetectorTrackerHit(event);
  newHit->SetTrackID  (aStep->GetTrack()->GetTrackID());
  newHit->SetChamberNb(aStep->GetPreStepPoint()->GetTouchableHandle()
                                               ->GetCopyNumber());
  newHit->SetEdep     (edep);
  newHit->SetPos      (aStep->GetPostStepPoint()->GetPosition());
  trackerCollection->insert( newHit );
  
  G4ThreeVector pos = aStep->GetPostStepPoint()->GetPosition();
  G4String particleType = aStep->GetTrack()->GetParticleDefinition()->GetParticleName();


  depPosX.push_back(pos.getX());
  depPosY.push_back(pos.getY());
  depParticleType.push_back(particleType);
  energyLeft.push_back(aStep->GetTrack()->GetKineticEnergy());
  currentTrackID.push_back(aStep->GetTrack()->GetTrackID());
  parentTrackID.push_back(aStep->GetTrack()->GetParentID());  
  

  //newHit->Print();
  //newHit->Draw();

  return true;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void SiliconDetectorTrackerSD::EndOfEvent(G4HCofThisEvent*)
{
  if (verboseLevel>-1) { 
     G4int NbHits = trackerCollection->entries();
     /*G4cout << "\n-------->Hits Collection: in this event there are " << NbHits 
            << " hits in the tracker chambers: " << G4endl;
     for (G4int i=0;i<NbHits;i++) (*trackerCollection)[i]->Print(); */
    } 
}

