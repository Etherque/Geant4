     =========================================================
 		         Geant4 - NSECT example
     =========================================================

                                README file
                          ----------------------

Anuj Kapadia, Phd.	   anuj.kapadia@duke.edu
Brian Harrawood		   brian.harrawood@duke.edu

Ravin Advanced Imaging Laboratories
Duke University Medical Center
Durham, NC  USA

Last modified by b. harrawood August 16, 2011


0. Introduction
===============

The purpose of the example is to demonstrate the use of two new C++
classes, the g4DistributedRunManager and the g4IdealDetector.  These
classes were designed with tomography scans in mind but may be useful
for any application requiring distributed processing or analytic
detection of particle production.

This example performs a Neutron Stimulated Emission Computed
Tomography scan on a simple target of copper and iron arranged in the
shape of the letter 'N'.  The scan requires the target to translate
through the beam stopping at 9 distinct locations.  The 'N' target is
then rotated by 12 degrees and the 9 location scans are repeated.  The
entire process is repeated until the target is rotated through 180
degrees, i.e, 15 rotations.  The total number of target position is
15*9 or 135.  

At each position, we are interested in the number of counts of gamma
particles generated by inelastic scatter with iron or copper.  These
counts create sinograms for each element which may be subsequently
used to reconstruct an image of the 'N' target.  The reconstruction
code is not provided with the example.


1. g4DistributedRunManager
==========================

The g4DistributedRunManager class is derived from the G4RunManager
class.  It provides a simple model for the distribution of the
analysis to other processes both on the same machine and on a local
network, providing processing in parallel at two levels of granularity
(positional and incremental). A position is a specific model
configuration for a run and an increment is a fraction of a run.

The incremental granularity is the simplest of the two. Any run of T
events can be divided into N increments of X events such that T = N *
X.  Simple post-processing can be used to combine the results. This
technique can easily be retro-fitted to existing models with no changes
to the existing classes.

The positional granularity is for those jobs which require runs for
multiple model configurations. This requires the model to have the
capability to adjust itself programatically before each run.  The
NSECT model provides a demonstration of this use of the
g4DistributedRunManager class.

The g4DistributedRunManager class uses a simple master/client network
model. The master process listens for client connections, provides a
random-number-generator seed to the client, and then distributes
tickets to the client indicating the work that must be performed.
Each ticket contains three numbers: a position index, an increment
index, and the number of events to be run for this ticket.

The DistributedRunManager requires the user to derive a TicketManager
from the g4TicketManager class to specify how each of the tickets are
to be handled.  In the simplest incremental case, the
TicketManager::HandleTicket method just needs to set BeamOn to the
number of events passed in with the ticket. For more complex jobs, the
TicketHandler is called on to modify the configuration of the model.

1.1 Distribution method
-----------------------
To distribute the analysis to a local network, it is necessary that
each machine has access to the master process on port 0x7782
(user configurable).  For example, consider a three node network:

machine 1)  winkin   (x86_64-linux)
machine 2)  blinkin  (i386-linux)
machine 3)  nod      (intel-mac)

Start a master process on winkin:

winkin% $G4WORKDIR/bin/$G4SYSTEM/nsect -p -n 1e5 -i 5e4 -v &

where:
	-p       :specifies to use positions
	-n 1e5   :specifies 1e5 events at each position
	-i 5e4   :specifies 1e4 increments per process
	-v       :specifies verbose output

Then you can start a client on winkin...

winkin% $G4WORKDIR/bin/$G4SYSTEM/nsect -H winkin &

where:
	-H winkin :specifies connect to master process running on winkin

Then you can log in to blinkin and nod and start one or more clients on
each.

blinkin% $G4WORKDIR/bin/$G4SYSTEM/nsect -H winkin &
nod%     $G4WORKDIR/bin/$G4SYSTEM/nsect -H winkin &

Each client process connects to the master and requests a ticket.
After processing the ticket, the client informs the master that the
work specified by the ticket is complete and requests a new ticket.
This continues until all tickets have been completed.  If no clients
are started, the master will perform the work specified by each ticket
itself.

To prevent network collisions, each client to master connection is
established with a handshake which includes the user's ID and the
version of Geant4 used to build the executable.  The master generates
a random seed for each client which the client uses to seed it's own
RNG.

The g4DistributedRunManager class redirects the G4cout from each
ticket processed into an appropriately named output file.  It is
convenient, although not necessary, for each process to execute in
the same directory (e.g., via NFS) so that the output files are
collated in one place.

1.2 Class options
 ----------------- 
The network port number used by the master to listen for new clients
is specified in the class constructor.  For a given network interface,
only one process may listen on a given port.  If you want to run
multiple masters on a single machine, you can use other port numbers
(use the -x option with nsect).  Be sure to start your clients using
the same port number you specify for the master.

A verbose option is available with the master process.  It will print
tickets as they are dispatched and as they are completed.  For each
ticket (except those dispatched to the master task), it also prints
the host name and process id of the client.

Each master process maintains a file named ./restart_positions. If the
master process is terminated before all tickets are completed,
restarting with the restart flag (-r from the command line) allows the
job to continue from where it left off before termination.  The master
process will check each ticket against the list of completed tickets
in the restart file. If a ticket appears in the file, it is considered
complete and will not be dispatched.

1.3 Integration with model
--------------------------
The g4DistributedRunManager class may be used in place of the
G4RunManager.  If it is constructed with no arguments, it will seed
the random number generator and then work identically to the
G4RunManager.  In order to take advantage on the extended features,
two additional class constructors are offered.

The constructor for the master process takes arguments for the number
of positions, events per position, events per increment, network port
number, and a restart flag.  The constructor for the client accepts
arguments for the host name of the master process and the network port
number.

The g4DistributedRunManager requires the additional registration of a
TicketManager object.  The g4TicketManager is a simple base class with
one virtual method, HandleTicket.  The user must create a class
derived from g4TicketManager which defines the HandleTicket method and
then pass a pointer to the object into the g4DistributedRunManager
object using the SetUserTicketManager method.


      NSECTTicketManager * the_ticket_manager = new
      NSECTTicketManager(runManager, NSECTdetector, NSECTgenerator);
       
      runManager->SetUserTicketManager(the_ticket_manager);

Then, the dispatching and processing of tickets is run with the
RunTickets method until all tickets are completed.

      runManager->RunTickets();

The ticket manager in our example is created with pointers to the
detector constructor and the primary generator.  The position index
included in each ticket is passed into the detector constructor and
used to reconfigure the geometry into one of the 135 positions.  The
primary generator pointer in the TicketManager class is not used in
this example.


2.0 g4IdealDetector
===================

The g4IdealDetector class enables user-defined criteria for detecting
all particles exiting the world.  It examines the steps passed into
the UserSteppingAction method and requires no additions to the modeled
geometry.

The detector is an analytical sphere with user-defined radius.  The
location of a particle leaving the world is projected onto the sphere
based on the particle's location and direction of travel.  The
location on the sphere, the particle type, energy, and the time of
intersection are printed.

The coordinates of the particle intersection with the sphere can be
reported in Cartesian or polar coordinates or both.  The detector
sphere can be divided into any number of user-defined phi/theta bins
and the g4IdealDetector can be used to generate spatial histograms.

Calls to the printing methods of this class, PrintCoordinates,
PrintAngle, and PrintHistogram generate output to G4cout.

2.1 Class options
-----------------
Multiple detectors may be instantiated and the constructor permits the
labeling of each detector.  The constructor also sets the radius of the
detector.  Additionally, energy bands may be set to select specific
energy values (ignoring particles outside of the band).  Multiple
energy bands may be set per detector and labeled.

Two methods (PrintCoordinates and PrintAngle) are provided to print
information about each particle as it leaves the world: one for
Cartesian coordinates, one for polar coordinates.  In addition to the
location, each method also prints the particle name, energy, and time
at which it passes through the detector sphere.  These methods must be
called from the SteppingAction::UserSteppingAction method.

A spatial histogram is created by the detector.  The number of bins in
phi and theta can be set by the user (the default is one).  The Record
method must be called (similarly to PrintCoordinates or PrintAngle
above) in the SteppingAction::UserSteppingAction method to increment a
bin in the histogram.  The PrintHistogram and ZeroHistogram methods
are used to print and reset the histogram respectively.

2,2 Integration with model
--------------------------
The g4IdealDetector is created in the main function of nsect.cc.  

      g4IdealDetector * ideal_detector = new g4IdealDetector(1*m, new
      G4String("GammaDetector"));

      ideal_detector->SetEnergyRange(846*keV, 848*keV, new
      G4String("Iron"));
      ideal_detector->SetEnergyRange(961*keV,963*keV, new
      G4String("Copper"));

The constructor creates a new ideal detector: an analytical sphere of
1 meter radius centered at the origin of the world. The user must
select a radius large enough to completely surround the target. The
ideal detector will only detect particles leaving the world if the
particle's track originated within the sphere.

The next two lines set two distinct energy bands in the detector; 846
to 868 keV (corresponding to the 847 keV gamma emission in 56Fe) and
961 to 963 keV (corresponding to the 962 keV gamma emission in 63Cu).
Each peak is labeled.

In the NSECTSteppingAction.cc file, the steps are first filtered to
ensure that only gamma rays are passing into the ideal detector (as
shown below).  The detector determines which of the steps to record or
print based on the step conditions (is it leaving the world?) and on
the energy bands defined.  In our model, we have commented out the
printing of each gamma to keep the output simple.

  if (name=="gamma") {
    //the_detector->PrintCoordinates(fStep);
    the_detector->Record(fStep);
  }

Finally, in the NSECTRunAction.cc file we print the histogram at the
end of the run and reset the histogram at the start of the next run.

      void NSECTRunAction::BeginOfRunAction(const G4Run* )
      {
        ideal_detector->ZeroHistogram();
      }

      void NSECTRunAction::EndOfRunAction(const G4Run *)
      {
        ideal_detector->PrintHistogram();
      }
  

3.0 The nsect model
===================

The model is a simplified GEANT4 model used to demonstrate the
g4DistributedRunManager and the g4IdealDetector classes.  It scans 135
positions of the solid iron-copper target to generate sinograms for
iron (56Fe) and copper (63Cu).  The sinograms can be used in a later
reconstruction to generate a CT image of the target.

3.1 Running the model
---------------------
The nsect model is designed to run in multiple modes.  With no
arguments, the model runs interactively with visualization (it expects
to find a vis.mac file in the current directory).  With one argument
(e.g., run.mac) the model runs in batch mode, executing the commands
in the run.mac file one at a time. The /NSECT/Position command is
available to both of these modes to move the target to a new position.

The model also accepts command arguments in the form of flags.  For
instance, running nsect with the -h flag will print 'help' for the
program.  Other flags include:

-p	  :run in multiple positions
-n N      :run N events (in each position if -p is used)
-i I      :divide the N events into increments of size I
-r        :restart the analysis skipping tickets in the restart file
-H host   :connect to master running on host (client only)
-v        :verbose

The -v is only recognized by the master process. It generates a
listing of tickets as they are started and completed and prints it to
G4cerr.

3.2 Generating the sinograms
----------------------------
An example of running the model to generate sinograms is as follows:

% $G4WORKDIR/bin/$G4SYSTEM/nsect -p -n 1e5 -i 5e4 -v &

to start a master process (e.g., on a host named epoch).  Additional
client process could be started on the same machine, or other machines
on a local network with the command:

% $G4WORKDIR/bin/$G4SYSTEM/nsect -H epoch &

3.3  Output
-----------
The master task will print it's verbose ticket tracking to standard error:

starting ticket: 1:1
finished ticket: 1:1
starting ticket: 1:2
starting ticket: 2:1 <epoch.duhs.duke.edu:21833>
starting ticket: 2:2 <epoch.duhs.duke.edu:21836>
starting ticket: 3:1 <epoch.duhs.duke.edu:21839>
starting ticket: 3:2 <epoch.duhs.duke.edu:21842>
starting ticket: 4:1 <epoch.duhs.duke.edu:21845>
starting ticket: 4:2 <epoch.duhs.duke.edu:21848>
starting ticket: 5:1 <epoch.duhs.duke.edu:21851>
.
.
.

In the first three instances, no node name or process ID was printed
indicating the tickets were dispatched to the master process.

Upon completion, there will be a collection of output files (135 * 2
in this example) which look similar to this:

% cat output_0010_0002
Command: /home/brian/geant4.8.2/bin/Linux-g++/nsect
Host: epoch.duhs.duke.edu
ProcessID: 21851
Tue Aug  9 16:10:18 2011
Geant4 version Name: geant4-08-02-patch-01    (23-February-2007)
UserID: 526

Position: 10  Increment Number: 2

GammaDetector: Iron: Total Counts: 2
GammaDetector: Copper: Total Counts: 61

4.0 Known issues
================

The getopt library used to parse the command line in nsect.cc varies
from system to system and is known not to work with older versions of
the MacOS.

The RunTicket loop protects each run by blocking signals to the
process.  A kill signal to the process will be ignored until the
current run has finished.  It is always possible to terminate the
process with 'kill -9'.

Killing the master causes the clients to die after they finish their
current ticket.

Killing the master may leave the listening socket in a wait state.  In
this case, it may be necessary to wait 30 to 60 seconds before
restarting the master at the same port number.

The IdealDetector may be built using two different styles of polar
coordinates.  When STD_POLAR is defined at the build of
g4IdealDetector.cc, the expected polar coordinates are used.
Otherwise, the medical CT conventions are used (by default). For the
CT conventions, the inclination angle (phi) is measured between the xz
plane and the y elevation instead of between the xy plane and the z
elevation as used in STD_POLAR.

Running two master processes in one directory at the same time with
different port numbers will result in a collision of the use of the
./restart_positions file. 

A helper class named SyncLock is provided for thread synchronization.
It should be replaced with an STL component or GEANT4 class (if
available).





